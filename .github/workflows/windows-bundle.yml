---
name: 'Compile and bundle Windows tools'

on:
  push:         { branches: [ 'main' ] }
  pull_request: { branches: [ 'main' ] }

jobs:
  csharp:
    runs-on: 'windows-2019'
    strategy:
      matrix: { project: [ 'Seatbelt', 'SharPersist' ] }
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 1
          submodules: 'recursive'

      - name: 'Setup MSBuild'
        uses: 'microsoft/setup-msbuild@v2'

      - name: 'Setup NuGeet'
        uses: 'NuGet/setup-nuget@v2'

      - name: 'Restore the solution'
        run: 'nuget restore ${{ matrix.project }}.sln'
        working-directory: 'windows/${{ matrix.project }}'
      
      - name: 'Pre-hooks'
        run: |
          # SharPersist
          if ('${{ matrix.project }}' -eq 'SharPersist') {
              Write-Host 'Installing SharPersist dependencies'
              Install-Package -Force -Scope CurrentUser -Name Costura.Fody -RequiredVersion 3.3.3
              Install-Package -Force -Scope CurrentUser -SkipDependencies -Name TaskScheduler -RequiredVersion 2.8.11
          }

      - name: 'Build the solution'
        run: 'msbuild /p:Configuration=Release'
        working-directory: 'windows/${{ matrix.project }}'

      - name: 'Archive the artifacts'
        uses: 'actions/upload-artifact@v4'
        with:
          name: '${{ matrix.project }}'
          path: 'windows/${{ matrix.project }}/${{ matrix.project }}/bin/Release/${{ matrix.project }}.exe'
          if-no-files-found: 'error'

  powershell:
    runs-on: 'ubuntu-latest'
    strategy:
      matrix: { project: [ 'MailSniper', 'PowerSharpPack' ] }
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 1
          submodules: 'recursive'

      - name: 'Copy all the PWSH scripts'
        run: |
          mkdir -p /tmp/${{ matrix.project }}
          find . -type f -name '*.ps1' -exec cp {} /tmp/${{ matrix.project }}/ \;
        working-directory: 'windows/${{ matrix.project }}'

      - name: 'Archive the artifacts'
        uses: 'actions/upload-artifact@v4'
        with:
          name: '${{ matrix.project }}'
          path: '/tmp/${{ matrix.project }}/'
          if-no-files-found: 'error'

  windows-bundle:
    runs-on: 'ubuntu-latest'
    needs: [ 'csharp', 'powershell' ]
    steps:
      - name: 'Download csharp artifacts'
        uses: 'actions/download-artifact@v4'
        with:
          path: '/tmp/bundle/'
          pattern: '*'
          merge-multiple: false

      - name: 'Remove the temporary artifacts'
        uses: 'geekyeggo/delete-artifact@v5'
        with:
          name: '*'

      - name: 'Extra steps'
        run: |
          # Seatbelt
          echo 'Copying the Seatbelt powershell version to Seatbelt directory'
          cp ./PowerSharpPack/Invoke-Seatbelt.ps1 ./Seatbelt/
        working-directory: '/tmp/bundle/'

      - name: 'Upload the final artifact'
        uses: 'actions/upload-artifact@v4'
        with:
          if-no-files-found: 'error'
          name: 'hackpack'
          path: '/tmp/bundle/'
          compression-level: 9
...
